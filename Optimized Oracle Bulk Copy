using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Reflection;

public class ObjectDataReader<T> : IDataReader
{
    private readonly IEnumerator<T> _enumerator;
    private readonly List<PropertyInfo> _properties;

    public ObjectDataReader(IEnumerable<T> data)
    {
        _enumerator = data.GetEnumerator();
        _properties = new List<PropertyInfo>(typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public));
    }

    public object GetValue(int i) => _properties[i].GetValue(_enumerator.Current) ?? DBNull.Value;
    public int FieldCount => _properties.Count;
    public string GetName(int i) => _properties[i].Name;
    public bool Read() => _enumerator.MoveNext();

    public void Dispose() => _enumerator.Dispose();
    public void Close() => Dispose();

    // Méthodes inutilisées pour le BulkCopy
    public bool NextResult() => false;
    public int Depth => 0;
    public bool IsClosed => false;
    public int RecordsAffected => -1;
    public DataTable GetSchemaTable() => null;
    public bool GetBoolean(int i) => (bool)GetValue(i);
    public byte GetByte(int i) => (byte)GetValue(i);
    public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) => throw new NotSupportedException();
    public char GetChar(int i) => (char)GetValue(i);
    public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) => throw new NotSupportedException();
    public IDataReader GetData(int i) => throw new NotSupportedException();
    public string GetDataTypeName(int i) => GetFieldType(i).Name;
    public DateTime GetDateTime(int i) => (DateTime)GetValue(i);
    public decimal GetDecimal(int i) => (decimal)GetValue(i);
    public double GetDouble(int i) => (double)GetValue(i);
    public Type GetFieldType(int i) => _properties[i].PropertyType;
    public float GetFloat(int i) => (float)GetValue(i);
    public Guid GetGuid(int i) => (Guid)GetValue(i);
    public short GetInt16(int i) => (short)GetValue(i);
    public int GetInt32(int i) => (int)GetValue(i);
    public long GetInt64(int i) => (long)GetValue(i);
    public string GetString(int i) => (string)GetValue(i);
    public int GetOrdinal(string name) => _properties.FindIndex(p => p.Name == name);
    public bool IsDBNull(int i) => GetValue(i) == DBNull.using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;

public class OracleBulkCopyHelper
{
    private readonly string _connectionString;

    public OracleBulkCopyHelper(string connectionString)
    {
        _connectionString = connectionString;
    }

    public void BulkInsert<T>(IEnumerable<T> entities, string destinationTable, int? batchSize = null)
    {
        // Calcul BatchSize optimal
        int totalCount = (entities as ICollection<T>)?.Count ?? 0;
        int optimalBatchSize = batchSize ?? Math.Min(Math.Max(totalCount / 10, 5000), 20000);

        using var connection = new OracleConnection(_connectionString);
        connection.Open();

        using var transaction = connection.BeginTransaction();
        using var bulkCopy = new OracleBulkCopy(
            connection,
            OracleBulkCopyOptions.UseInternalTransaction | OracleBulkCopyOptions.Default,
            transaction)
        {
            DestinationTableName = destinationTable,
            BatchSize = optimalBatchSize,
            BulkCopyTimeout = 0 // pas de limite
        };

        // Mapping explicite basé sur les propriétés T
        var props = typeof(T).GetProperties();
        foreach (var prop in props)
        {
            // Hypothèse : nom de la propriété = nom colonne Oracle
            bulkCopy.ColumnMappings.Add(prop.Name, prop.Name.ToUpper());
        }

        // Progression
        bulkCopy.NotifyAfter = optimalBatchSize;
        bulkCopy.OracleRowsCopied += (s, e) =>
        {
            Console.WriteLine($"{e.RowsCopied} lignes copiées...");
        };

        // Direct Path Insert si supporté
        try
        {
            bulkCopy.WriteToServer(new ObjectDataReader<T>(entities));
            transaction.Commit();
            Console.WriteLine("✅ Bulk insert terminé avec succès.");
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            Console.Error.WriteLine($"❌ Erreur lors du bulk insert : {ex.Message}");
            throw;
        }
    }
}


