using System.Data;
using ExcelDataReader;

public class ExcelScenarioExtractor
{
    private readonly DateTime _situationDate;

    public ExcelScenarioExtractor(DateTime situationDate)
    {
        _situationDate = situationDate;
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
    }

    public (ReefIndex, List<GroupeScenario>) Extract(string filePath)
    {
        using var stream = File.Open(filePath, FileMode.Open, FileAccess.Read);
        using var reader = ExcelReaderFactory.CreateReader(stream);

        var result = reader.AsDataSet();
        var scenarioGroups = new List<GroupeScenario>();
        ReefIndex reefIndex = null;

        foreach (DataTable sheet in result.Tables)
        {
            if (sheet.TableName.Equals("doc", StringComparison.OrdinalIgnoreCase))
                continue;

            // Lecture de la ligne 1 (metadata)
            string currency = sheet.Rows[0][0]?.ToString()?.Trim();
            string source = sheet.Rows[0][1]?.ToString()?.Trim();
            string tenor = sheet.Rows[0][3]?.ToString()?.Trim();
            reefIndex ??= new ReefIndex { Currency = currency, Source = source, Tenor = tenor };

            // Ligne 2 : détection des dates et de la date d’horizon
            var horizonDates = new List<DateTime>();
            int horizonColIndex = -1;

            for (int col = 1; col < sheet.Columns.Count; col++)
            {
                if (DateTime.TryParse(sheet.Rows[1][col]?.ToString(), out var date))
                {
                    horizonDates.Add(date);
                    if (horizonColIndex == -1 && date >= _situationDate)
                    {
                        horizonColIndex = col;
                    }
                }
            }

            if (horizonColIndex == -1)
                throw new InvalidOperationException("Aucune date d'horizon trouvée supérieure ou égale à la date de situation.");

            // Traitement des lignes à partir de la 3e (index 2)
            string lastScenarioLabel = null;
            int currentNumScenario = 0;

            for (int row = 2; row < sheet.Rows.Count; row++)
            {
                var scenarioLabel = sheet.Rows[row][0]?.ToString()?.Trim();

                if (string.IsNullOrWhiteSpace(scenarioLabel))
                    continue;

                if (scenarioLabel != lastScenarioLabel)
                {
                    currentNumScenario = 0;
                    lastScenarioLabel = scenarioLabel;
                }

                for (int col = horizonColIndex; col < sheet.Columns.Count; col++)
                {
                    var cellValue = sheet.Rows[row][col]?.ToString()?.Trim();

                    if (double.TryParse(cellValue, NumberStyles.Any, CultureInfo.InvariantCulture, out double rate))
                    {
                        int horizon = col - horizonColIndex;

                        scenarioGroups.Add(new GroupeScenario
                        {
                            ScenarioLabel = scenarioLabel,
                            ScenarioCode = scenarioLabel, // Supposé égal à label ici
                            Horizon = horizon,
                            NumScenario = currentNumScenario,
                            Rate = rate
                        });

                        currentNumScenario++;
                    }
                }
            }
        }

        return (reefIndex, scenarioGroups);
    }
}
