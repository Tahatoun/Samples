using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace MyProject.Logging
{
    // ✅ Classe qui fait tout : log entrée, sortie, exception, durée
    public class LoggingFilter : IActionFilter
    {
        private readonly ILogger<LoggingFilter> _logger;
        private Stopwatch _stopwatch;

        public LoggingFilter(ILogger<LoggingFilter> logger)
        {
            _logger = logger;
        }

        public void OnActionExecuting(ActionExecutingContext context)
        {
            _stopwatch = Stopwatch.StartNew();

            var actionName = context.ActionDescriptor.DisplayName;
            var parameters = context.ActionArguments;

            _logger.LogInformation("➡️ Start {Action} with params: {@Params}", actionName, parameters);
        }

        public void OnActionExecuted(ActionExecutedContext context)
        {
            _stopwatch.Stop();

            var actionName = context.ActionDescriptor.DisplayName;
            var elapsedMs = _stopwatch.ElapsedMilliseconds;

            if (context.Exception == null)
            {
                _logger.LogInformation("✅ End {Action} (took {Elapsed} ms)", actionName, elapsedMs);
            }
            else
            {
                _logger.LogError(context.Exception, "❌ {Action} failed after {Elapsed} ms", actionName, elapsedMs);
            }
        }
    }

    // ✅ Classe d’extension pour enregistrer facilement le filtre globalement
    public static class LoggingFilterExtensions
    {
        public static IServiceCollection AddLoggingFilter(this IServiceCollection services)
        {
            services.AddScoped<LoggingFilter>(); // Inject logger automatiquement
            services.AddControllers(options =>
            {
                options.Filters.AddService<LoggingFilter>();
            });
            return services;
        }

        public static IApplicationBuilder UseLoggingFilter(this IApplicationBuilder app)
        {
            // Le filtre est injecté via AddControllers, rien de spécial ici
            return app;
        }
    }
}


builder.Services.AddLoggingFilter();

