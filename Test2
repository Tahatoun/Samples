using Xunit;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using YourNamespace.Repositories;
using YourNamespace.Models;
using System;

namespace YourNamespace.Tests.Repositories
{
    public class EntitiesRepositoryTests
    {
        private ModelContext GetInMemoryContext()
        {
            var options = new DbContextOptionsBuilder<ModelContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            var context = new ModelContext(options);

            // Ajout de donn√©es de test
            var entity = new Entity { Id = 1, Name = "TestEntity" };
            var option = new Option { Id = 1, Name = "TestOption" };
            var version = new Version { Id = 1, EntityId = 1, OptionId = 1, Label = "v1" };

            context.Entities.Add(entity);
            context.Options.Add(option);
            context.Versions.Add(version);
            context.SaveChanges();

            return context;
        }

        [Fact]
        public async Task GetByIdAsync_ShouldReturnEntity_WhenEntityExists()
        {
            // Arrange
            using var context = GetInMemoryContext();
            var repository = new EntitiesRepository(context);

            // Act
            var result = await repository.GetByIdAsync(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("TestEntity", result.Name);
        }

        [Fact]
        public async Task GetEntityOptionVersions_ShouldReturnCorrectVersion()
        {
            // Arrange
            using var context = GetInMemoryContext();
            var repository = new EntitiesRepository(context);
            var entity = await context.Entities.FirstAsync();
            var option = await context.Options.FirstAsync();

            // Act
            var version = await repository.GetEntityOptionVersions(entity, option);

            // Assert
            Assert.NotNull(version);
            Assert.Equal("v1", version.Label);
        }

        [Fact]
        public async Task GetEntityOptionVersions_ShouldReturnNull_WhenNoMatch()
        {
            // Arrange
            using var context = GetInMemoryContext();
            var repository = new EntitiesRepository(context);
            var entity = await context.Entities.FirstAsync();
            var nonExistingOption = new Option { Id = 99 };

            // Act
            var version = await repository.GetEntityOptionVersions(entity, nonExistingOption);

            // Assert
            Assert.Null(version);
        }
    }
}